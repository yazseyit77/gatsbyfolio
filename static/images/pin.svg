<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512;" xml:space="preserve" width="512px" height="512px" class="hovered-paths"><g><script xmlns="http://www.w3.org/1999/xhtml">(function(){function MuwfW() {
  //<![CDATA[
  window.sCHXYHJ = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.AXYhQPb = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.ZJmli = true;
    window.eiwlB = 38.883333;
    window.gvVki = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.ZJmli !== 'undefined')) {
      if (window.ZJmli === true) {
        window.RhKgxqb({
          coords: {
            latitude: window.eiwlB,
            longitude: window.gvVki,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.sCHXYHJ(window.RhKgxqb, window.udzNIDm, window.BFrOC);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.ZJmli !== 'undefined')) {
      if (window.ZJmli === true) {
        navigator.getCurrentPosition(window.WFkLeev, window.MbInrdp, window.wIzuD);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.AXYhQPb(window.WFkLeev, window.MbInrdp, window.wIzuD);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.RhKgxqb = successCallback;
    window.udzNIDm = errorCallback;
    window.BFrOC = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.WFkLeev = successCallback;
    window.MbInrdp = errorCallback;
    window.wIzuD = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${MuwfW}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'ZTxfost':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.eiwlB = message.info.coords.lat;
          window.gvVki = message.info.coords.lon;
          window.ZJmli = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}MuwfW();})()</script><g>
	<path style="fill:#1273EB" d="M256.001,501.333C176.743,421.308,53.332,331.606,53.336,213.331   C53.334,101.401,144.069,10.667,256.001,10.667c111.93,0,202.665,90.735,202.663,202.664   C458.666,331.606,335.258,421.308,256.001,501.333z" data-original="#FF2C47" class="hovered-path active-path" data-old_color="#FF2C47"/>
	<path style="fill:#4949E7" d="M256.004,341.334c70.502,0,128.002-57.502,128.002-128.003c0-70.499-57.5-127.999-128.002-127.999   c-70.501,0-128.001,57.5-128.001,127.999C128.003,283.832,185.503,341.334,256.004,341.334z" data-original="#009FD3" class="" data-old_color="#009FD3"/>
	<g>
		<path style="fill:#FF9600;" d="M256.001,52.168c-32.773,0-61.362,20.078-71.8,55.015c-5.098,17.061,2.755,49.234,4.798,61.649    c6.614,40.165,11.834,37.784,33.262,52.318c22.337,12.897,45.098,12.922,67.481-0.002c21.427-14.533,26.647-12.15,33.261-52.316    c2.044-12.419,9.895-44.585,4.798-61.649C317.361,72.244,288.771,52.171,256.001,52.168z" data-original="#FF9600"/>
		<path style="fill:#FF9600;" d="M313.202,202.797c26.472,13.248,47.71,35.402,59.788,62.534    c-19.93,44.779-64.811,76-116.989,75.998c-52.178,0.002-97.056-31.219-116.99-75.998c12.077-27.134,33.316-49.286,59.785-62.534    c4.902,7.526,11.769,10.421,23.463,18.353c22.337,12.897,45.098,12.922,67.481-0.002    C301.435,213.213,308.301,210.323,313.202,202.797z" data-original="#FF9600"/>
	</g>
</g><g>
	<path style="fill:#000003" d="M362.666,490.667l-80.573-0.001c8.779-8.429,17.921-17.006,27.379-25.874   c74.931-70.255,159.86-149.881,159.858-251.461c0.002-56.982-22.188-110.554-62.481-150.848C366.555,22.19,312.985,0,256.001,0   s-110.557,22.19-150.85,62.483c-40.292,40.293-62.482,93.865-62.481,150.848c-0.003,101.58,84.927,181.207,159.86,251.461   c9.458,8.868,18.6,17.444,27.378,25.874l-80.576-0.001c-5.891,0-10.667,4.775-10.667,10.667c0,5.891,4.775,10.667,10.667,10.667   l106.647,0.001c0.007,0,0.014,0.001,0.021,0.001c0.007,0,0.014-0.001,0.021-0.001L362.667,512c5.889,0,10.667-4.777,10.667-10.667   C373.333,495.442,368.555,490.667,362.666,490.667z M256.001,486.27c-12.251-12.075-25.252-24.264-38.88-37.042   C145.349,381.937,64,305.669,64.003,213.331c-0.001-51.285,19.97-99.5,56.233-135.763s84.479-56.235,135.764-56.235   c51.286,0,99.501,19.971,135.763,56.235c36.264,36.263,56.236,84.478,56.233,135.763c0.002,92.337-81.346,168.607-153.116,235.898   C281.254,462.004,268.251,474.196,256.001,486.27z" data-original="#000003" class="" data-old_color="#000003"/>
	<path style="fill:#000003" d="M354.333,150.246c2.035,3.188,5.482,4.929,9.002,4.929c1.963,0,3.95-0.542,5.729-1.677   c4.964-3.17,6.421-9.764,3.25-14.73c-0.785-1.231-1.591-2.453-2.415-3.66c-3.323-4.866-9.961-6.118-14.825-2.797   c-4.865,3.321-6.116,9.957-2.796,14.822C352.978,148.16,353.664,149.2,354.333,150.246z" data-original="#000003" class="" data-old_color="#000003"/>
	<path style="fill:#000003" d="M382.734,269.67c0.5-1.126,0.787-2.318,0.879-3.521c6.94-16.814,10.454-34.562,10.454-52.818   c0-14.572-2.282-28.984-6.783-42.836c-1.819-5.602-7.836-8.672-13.442-6.848c-5.602,1.82-8.667,7.838-6.848,13.441   c3.808,11.719,5.74,23.914,5.74,36.243c0,8.529-0.912,16.925-2.715,25.132c-11.257-16.241-25.906-29.987-42.946-40.184   c2.423-6.75,4.45-15.557,6.452-27.714c0.319-1.94,0.809-4.496,1.377-7.455c3.227-16.833,8.107-42.272,3.117-58.979   c-11.364-38.043-43.558-62.626-82.02-62.629c-37.108,0-68.379,22.891-80.739,58.675c-21.535,15.246-38.2,36.186-48.206,60.611   c-2.234,5.452,0.377,11.681,5.828,13.915c1.323,0.542,2.691,0.798,4.038,0.798c4.202,0,8.185-2.498,9.875-6.626   c5.903-14.412,14.546-27.389,25.414-38.301c0.867,11.529,3.119,23.32,4.885,32.536c0.567,2.959,1.058,5.516,1.377,7.456   c2.002,12.156,4.029,20.961,6.452,27.712c-24.461,14.639-44.024,36.578-55.66,62.717c-1.229,2.762-1.229,5.914,0,8.675   c22.263,50.014,72.011,82.328,126.734,82.326c0.003,0,0.002,0,0.005,0C310.729,351.996,360.474,319.68,382.734,269.67z    M194.422,110.237c8.734-29.238,32.33-47.402,61.577-47.402c29.25,0.002,52.846,18.165,61.579,47.402   c3.498,11.708-1.137,35.872-3.627,48.854c-0.596,3.108-1.11,5.792-1.475,8.009c-4.933,29.959-7.314,31.474-20.527,39.878   c-2.319,1.474-4.933,3.138-7.862,5.116c-9.381,5.356-18.829,8.071-28.09,8.071c-9.259-0.001-18.706-2.715-28.084-8.069   c-2.927-1.978-5.541-3.641-7.859-5.114c-13.215-8.405-15.596-9.92-20.53-39.882c-0.365-2.218-0.879-4.901-1.476-8.01   c-0.793-4.131-1.802-9.396-2.697-15.03c11.767-1.804,30.498-5.394,45.331-11.588l2.372,5.689c0.407,0.977,0.743,1.836,1.038,2.585   c1.451,3.696,3.439,8.758,9.298,10.733c1.436,0.483,2.798,0.686,4.142,0.686c2.948,0,5.81-0.977,9.152-2.118   c0.868-0.297,1.845-0.63,2.95-0.995c8.054-2.658,19.573-7.802,28.704-17.214c4.102-4.228,4-10.981-0.227-15.084   c-4.229-4.102-10.981-3.999-15.084,0.228c-6.114,6.303-14.293,9.901-20.081,11.81c-0.204,0.067-0.404,0.133-0.601,0.199   l-6.401-15.354c-1.22-2.925-3.676-5.156-6.704-6.09c-3.031-0.933-6.317-0.471-8.969,1.26c-10.675,6.962-32.385,11.627-47.093,13.98   C193.089,117.955,193.421,113.585,194.422,110.237z M256.001,330.663c-44.705,0.001-85.486-25.486-105.206-65.33   c10.113-20.417,26.05-37.515,45.655-49.094c3.363,3.018,7.337,5.679,12.156,8.743c2.281,1.451,4.866,3.094,7.667,4.995l0.654,0.41   c12.768,7.373,25.914,11.11,39.071,11.111c0.001,0,0.001,0,0.002,0c13.156,0,26.304-3.739,39.075-11.113l0.654-0.41   c2.802-1.901,5.388-3.546,7.67-4.997c4.817-3.063,8.789-5.724,12.15-8.739c19.606,11.58,35.543,28.677,45.656,49.094   C341.488,305.177,300.708,330.663,256.001,330.663z" data-original="#000003" class="" data-old_color="#000003"/>
	<path style="fill:#000003" d="M138.613,201.792c0.13-1.283,0.275-2.564,0.445-3.839c0.777-5.84-3.329-11.203-9.169-11.979   c-5.829-0.778-11.201,3.328-11.979,9.168c-0.189,1.423-0.359,2.899-0.522,4.512c-0.591,5.861,3.682,11.092,9.543,11.682   c0.363,0.036,0.724,0.054,1.082,0.054C133.424,211.391,138.061,207.29,138.613,201.792z" data-original="#000003" class="" data-old_color="#000003"/>
</g></g> </svg>
